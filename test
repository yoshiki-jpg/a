-- SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local TextChatService = game:GetService("TextChatService")

-- CONFIGURATION
local MAIN_GROUP = {
    Leader = {Name = "3984minecraft", UserId = 9197514231},
    Members = {
        {Name = "2983thosewhoknow", UserId = 9196674738},
        {Name = "30milllionlives", UserId = 9197494713},
        {Name = "icantrollanym0re", UserId = 9197461990},
    }
}

local FARM_GROUP = {
    Leader = {Name = "thelancewavers", UserId = 9199773198},
    Members = {
        {Name = "setyourreroll", UserId = 9199762283},
        {Name = "influxofemotions", UserId = 9199707476},
        {Name = "mylifewavers", UserId = 9198864668},
    }
}

local ALL_ACCOUNTS = {
    9197514231, 9196674738, 9197494713, 9197461990, 9199773198, 9199762283, 9199707476, 9198864668
}

local PLACE_MAIN = 14067600077
local PLACE_MATCH = 18637069183
local PLACE_CASCADE = 138059541435332

local localPlayer = Players.LocalPlayer

-- UTILITY FUNCTIONS
local function SendChatMessage(message)
    -- Check if the new TextChatService is being used
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        -- Send message using the new TextChatService
        local textChannel = TextChatService.TextChannels.RBXGeneral
        textChannel:SendAsync(message)
    else
        -- Send message using the default chat system
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
    end
end

local function waitForGameLoaded()
    if not game:IsLoaded() then
        game.Loaded:Wait()
    end
end

local function safeTeleport(placeId)
    local attempts = 0
    while true do
        attempts = attempts + 1
        
        local success = pcall(function()
            TeleportService:Teleport(placeId, localPlayer)
        end)
        
        if success then 
            break 
        end
        task.wait(5)
    end
end

local function allAccountsInServer()
    local count = 0
    
    for _, player in pairs(Players:GetPlayers()) do
        for _, accountId in pairs(ALL_ACCOUNTS) do
            if player.UserId == accountId then
                count = count + 1
                break
            end
        end
    end
    
    return count == #ALL_ACCOUNTS
end

local function serverHasOnlySpecifiedAccounts()
    local specifiedAccountsInServer = {}
    local totalPlayersInServer = 0
    
    -- Count all players and track specified accounts
    for _, player in pairs(Players:GetPlayers()) do
        totalPlayersInServer = totalPlayersInServer + 1
        
        for _, accountId in pairs(ALL_ACCOUNTS) do
            if player.UserId == accountId then
                specifiedAccountsInServer[accountId] = true
                break
            end
        end
    end
    
    -- Count how many specified accounts are present
    local specifiedCount = 0
    for _ in pairs(specifiedAccountsInServer) do
        specifiedCount = specifiedCount + 1
    end
    
    -- Return true only if all players in server are from the specified accounts
    return specifiedCount == totalPlayersInServer and specifiedCount > 0
end

local function isLeaderInServer()
    for _, player in pairs(Players:GetPlayers()) do
        if player.UserId == MAIN_GROUP.Leader.UserId or player.UserId == FARM_GROUP.Leader.UserId then
            return true
        end
    end
    return false
end

local function tryJoinLeaderServer()
    -- Only attempt if current player is a member (not a leader)
    if localPlayer.UserId == MAIN_GROUP.Leader.UserId or localPlayer.UserId == FARM_GROUP.Leader.UserId then
        return -- Leaders don't need to join themselves
    end
    
    -- Check if this player belongs to any group
    local belongsToGroup = false
    for _, member in pairs(MAIN_GROUP.Members) do
        if localPlayer.UserId == member.UserId then
            belongsToGroup = true
            break
        end
    end
    if not belongsToGroup then
        for _, member in pairs(FARM_GROUP.Members) do
            if localPlayer.UserId == member.UserId then
                belongsToGroup = true
                break
            end
        end
    end
    
    if not belongsToGroup then
        return -- Only group members should try to join leaders
    end
    
    -- Try both leaders, 2 attempts total with 10 second cooldown
    local leaders = {MAIN_GROUP.Leader.Name, FARM_GROUP.Leader.Name}
    
    for attempt = 1, 2 do
        pcall(function()
            SendChatMessage("!joinserver " .. leaders[attempt])
        end)
        
        if attempt < 2 then
            task.wait(10)
        end
    end
end

local function waitForRemotesReady()
    local ready = false
    local attempts = 0
    while not ready and attempts < 60 do
        attempts = attempts + 1
        
        ready = pcall(function()
            ReplicatedStorage:WaitForChild("Remotes", 1)
            ReplicatedStorage.Remotes:WaitForChild("Team", 1)
            return true
        end)
        
        if not ready then 
            task.wait(1) 
        end
    end
    
    return ready
end

local function inviteMembers()
    if localPlayer.Name == MAIN_GROUP.Leader.Name then
        for attempt = 1, 3 do
            for _, member in pairs(MAIN_GROUP.Members) do
                pcall(function()
                    local targetPlayer = Players:FindFirstChild(member.Name)
                    if targetPlayer then
                        local args = {"Invite", targetPlayer}
                        ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
                    end
                end)
                task.wait(2)
            end
            if attempt < 3 then
                task.wait(8)
            end
        end
        
    elseif localPlayer.Name == FARM_GROUP.Leader.Name then
        for attempt = 1, 3 do
            for _, member in pairs(FARM_GROUP.Members) do
                pcall(function()
                    local targetPlayer = Players:FindFirstChild(member.Name)
                    if targetPlayer then
                        local args = {"Invite", targetPlayer}
                        ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
                    end
                end)
                task.wait(2)
            end
            if attempt < 3 then
                task.wait(8)
            end
        end
    end
end

local function acceptInvites()
    local leaderName = nil
    
    for _, member in pairs(MAIN_GROUP.Members) do
        if localPlayer.Name == member.Name then
            leaderName = MAIN_GROUP.Leader.Name
            break
        end
    end
    
    if not leaderName then
        for _, member in pairs(FARM_GROUP.Members) do
            if localPlayer.Name == member.Name then
                leaderName = FARM_GROUP.Leader.Name
                break
            end
        end
    end
    
    if leaderName then
        for i = 1, 3 do
            pcall(function()
                local leaderPlayer = Players:FindFirstChild(leaderName)
                if leaderPlayer then
                    local args = {"AcceptInvite", leaderPlayer}
                    ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
                end
            end)
            task.wait(5)
        end
    end
end

local function startQueue()
    -- Try leader first, then any group member as fallback
    if localPlayer.UserId == MAIN_GROUP.Leader.UserId or localPlayer.UserId == FARM_GROUP.Leader.UserId then
        for attempt = 1, 3 do
            pcall(function()
                local args = {"JoinQueue", "CASCADE"}
                ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
            end)
            if attempt < 3 then
                task.wait(5)
            end
        end
    elseif isMainGroupMember() or isFarmGroupMember() then
        -- Fallback: members can also try to queue
        task.wait(2) -- Small delay to let leader try first
        for attempt = 1, 4 do
            pcall(function()
                local args = {"JoinQueue", "CASCADE"}
                ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
            end)
            if attempt < 4 then
                task.wait(2)
            end
        end
    end
end

local function isMainGroupMember()
    if localPlayer.UserId == MAIN_GROUP.Leader.UserId then return true end
    for _, member in pairs(MAIN_GROUP.Members) do
        if localPlayer.UserId == member.UserId then return true end
    end
    return false
end

local function isFarmGroupMember()
    if localPlayer.UserId == FARM_GROUP.Leader.UserId then return true end
    for _, member in pairs(FARM_GROUP.Members) do
        if localPlayer.UserId == member.UserId then return true end
    end
    return false
end

-- MAIN EXECUTION
local function runPartyManager()
    waitForGameLoaded()
    
    local matchStartTime = tick()
    
    while true do
        if game.PlaceId == PLACE_MAIN then
            safeTeleport(PLACE_MATCH)
            
        elseif game.PlaceId == PLACE_MATCH then
            -- Check if no leader is in server and try to join one
            if not isLeaderInServer() then
                tryJoinLeaderServer()
            end
            
            while not allAccountsInServer() do
                local elapsed = tick() - matchStartTime
                
                if elapsed > 300 then
                    safeTeleport(PLACE_MAIN)
                    matchStartTime = tick()
                    break
                end
                task.wait(15)
            end
            
            if allAccountsInServer() then
                local remotesReady = waitForRemotesReady()
                
                if remotesReady then
                    inviteMembers()
                    task.wait(3)
                    
                    acceptInvites()
                    task.wait(10)
                    
                    startQueue()
                    return
                end
            end
            
        elseif game.PlaceId == PLACE_CASCADE then
            -- Check if server contains only specified accounts
            if not serverHasOnlySpecifiedAccounts() then
                -- If server has players that aren't in our account list, teleport immediately
                safeTeleport(PLACE_MATCH)
                matchStartTime = tick()
            else
                -- Original logic if server only has specified accounts
                task.wait(10)
                
                if isFarmGroupMember() then
                    safeTeleport(PLACE_MATCH)
                end
                
                task.wait(20)
                
                if isMainGroupMember() then
                    safeTeleport(PLACE_MATCH)
                end
                
                matchStartTime = tick()
            end
            
        end
        
        task.wait(1)
    end
end

-- START SCRIPT
spawn(runPartyManager)
