-- SERVICES
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- CONFIGURATION
local ALL_ACCOUNTS = {
    -- Main Group 1
    9405339756, 9405315646, 9405319087, 9405327038,
    -- Farm Group 1
    9406048015, 9403250688, 9404912407, 9404913321,
    -- Main Group 2
    9405342331, 9405323639, 9406045557, 9406047042,
    -- Farm Group 2
    9404900047, 9404918296, 9407872016, 9408703981
}

local PLACE_CASCADE = 138059541435332
local WEBHOOK = "https://discord.com/api/webhooks/1414252596830539956/DRrktLKjUKuUGIAu11TXrinT2LGkzI3Uchu0ttrNtS5xhDDzs6KT1yhX7UFbbsHi0SqK"

-- HTTP REQUEST FUNCTION
local httprequest = request or http_request or (http and http.request) or (syn and syn.request) or (fluxus and fluxus.request)

-- ACCOUNT CHECK FUNCTIONS
local function isSpecifiedAccount(userId)
    for _, accountId in pairs(ALL_ACCOUNTS) do
        if userId == accountId then
            return true
        end
    end
    return false
end

local function hasWrongPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if not isSpecifiedAccount(player.UserId) then
            return true
        end
    end
    return false
end

-- INVENTORY SCANNER
local oldInventory = {}

local function sendWebhook(item, change, total)
    if not httprequest or not WEBHOOK then return end
    
    task.spawn(function()
        httprequest({
            Url = WEBHOOK,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode({
                content = "ðŸ“¦ **INVENTORY UPDATE!**\n"
                    .. "**Item:** `" .. item .. "`\n"
                    .. "**Change:** +" .. change .. "\n"
                    .. "**Total:** " .. total
            })
        })
    end)
end

local function getInventory()
    local success, result = pcall(function()
        return game:GetService("ReplicatedStorage").Remotes.GetReadableData:InvokeServer()
    end)
    
    if success and result and result.Inventory then
        return result.Inventory
    end
    return {}
end

local function checkChanges()
    local newInventory = getInventory()
    
    for item, quantity in pairs(newInventory) do
        local newQty = tonumber(quantity) or 0
        local oldQty = tonumber(oldInventory[item]) or 0
        
        if newQty > oldQty then
            local change = newQty - oldQty
            sendWebhook(item, change, newQty)
        end
    end
    
    oldInventory = newInventory
end

-- MONITORING FUNCTION (accounts + inventory)
local function monitorServer()
    while true do
        if game.PlaceId == PLACE_CASCADE then
            -- Account enforcement
            if hasWrongPlayers() then
                game:Shutdown()
                break
            end

            -- Inventory monitoring
            checkChanges()
        end
        task.wait(2)
    end
end

-- PLAYER JOIN MONITORING
Players.PlayerAdded:Connect(function(player)
    if game.PlaceId == PLACE_CASCADE then
        if not isSpecifiedAccount(player.UserId) then
            game:Shutdown()
        end
    end
end)

-- INITIAL CHECKS
if game.PlaceId == PLACE_CASCADE then
    if hasWrongPlayers() then
        game:Shutdown()
    end
    oldInventory = getInventory()
end

-- START MONITORING
spawn(monitorServer)
