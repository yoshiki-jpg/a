-- SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")

-- CONFIGURATION
local MAIN_GROUP = {
    Leader = {Name = "3malaysians", UserId = 9247717801},
    Members = {
        {Name = "3ramlyborigar", UserId = 9252243951},
        {Name = "3mcdoharris", UserId = 9252259406},
        {Name = "3familialhamly", UserId = 9252229000},
    }
}

local FARM_GROUP = {
    Leader = {Name = "nguy83748", UserId = 9251688294},
    Members = {
        {Name = "elar87482", UserId = 9252971862},
        {Name = "reedfantastic04", UserId = 9253020411},
        {Name = "abhgemgfd", UserId = 9253013396},
    }
}

local ALL_ACCOUNTS = {
    9247717801, 9252243951, 9252259406, 9252229000, 9251688294, 9252971862, 9253020411, 9253013396
}

local PLACE_MAIN = 14067600077
local PLACE_MATCH = 18637069183
local PLACE_CASCADE = 138059541435332

local localPlayer = Players.LocalPlayer

-- UTILITY FUNCTIONS
local function waitForGameLoaded()
    if not game:IsLoaded() then
        game.Loaded:Wait()
    end
end

local function safeTeleport(placeId)
    local attempts = 0
    while true do
        attempts = attempts + 1
        
        local success = pcall(function()
            TeleportService:Teleport(placeId, localPlayer)
        end)
        
        if success then 
            break 
        end
        task.wait(5)
    end
end

local function allAccountsInServer()
    local count = 0
    
    for _, player in pairs(Players:GetPlayers()) do
        for _, accountId in pairs(ALL_ACCOUNTS) do
            if player.UserId == accountId then
                count = count + 1
                break
            end
        end
    end
    
    return count == #ALL_ACCOUNTS
end

local function waitForRemotesReady()
    local ready = false
    local attempts = 0
    while not ready and attempts < 60 do
        attempts = attempts + 1
        
        ready = pcall(function()
            ReplicatedStorage:WaitForChild("Remotes", 1)
            ReplicatedStorage.Remotes:WaitForChild("Team", 1)
            return true
        end)
        
        if not ready then 
            task.wait(1) 
        end
    end
    
    return ready
end

local function waitForGuiReady()
    local ready = false
    local attempts = 0
    while not ready and attempts < 60 do
        attempts = attempts + 1
        
        ready = pcall(function()
            local playerGui = localPlayer:WaitForChild("PlayerGui", 1)
            local menu = playerGui:WaitForChild("Menu", 1)
            local main = menu:WaitForChild("Main", 1)
            local sidebar = main:WaitForChild("Sidebar", 1)
            local party = sidebar:WaitForChild("Party", 1)
            local members = party:WaitForChild("Members", 1)
            
            if members and members.Parent then
                return true
            end
            return false
        end)
        
        if not ready then 
            task.wait(1) 
        end
    end
    
    return ready
end

local function getPartyMemberIds()
    local memberIds = {}
    
    local success, result = pcall(function()
        local playerGui = localPlayer.PlayerGui
        if not playerGui:FindFirstChild("Menu") then 
            return {} 
        end
        
        local menu = playerGui.Menu
        if not menu:FindFirstChild("Main") then 
            return {} 
        end
        
        local main = menu.Main  
        if not main:FindFirstChild("Sidebar") then 
            return {} 
        end
        
        local sidebar = main.Sidebar
        if not sidebar:FindFirstChild("Party") then 
            return {} 
        end
        
        local party = sidebar.Party
        if not party:FindFirstChild("Members") then 
            return {} 
        end
        
        local membersFrame = party.Members
        
        for _, child in pairs(membersFrame:GetChildren()) do
            if child and child.Name then
                local userId = tonumber(child.Name)
                if userId and userId > 0 then
                    table.insert(memberIds, userId)
                end
            end
        end
        
        return memberIds
    end)
    
    if success and result then
        return result
    else
        return {}
    end
end

local function isPlayerInCorrectGroup(userId)
    if userId == MAIN_GROUP.Leader.UserId then 
        return "MAIN" 
    end
    
    for _, member in pairs(MAIN_GROUP.Members) do
        if userId == member.UserId then 
            return "MAIN" 
        end
    end
    
    if userId == FARM_GROUP.Leader.UserId then 
        return "FARM" 
    end
    
    for _, member in pairs(FARM_GROUP.Members) do
        if userId == member.UserId then 
            return "FARM" 
        end
    end
    
    return false
end

local function verifyParties()
    local partyIds = getPartyMemberIds()
    print("[VERIFY DEBUG] Found party member IDs:", table.concat(partyIds, ", "))
    
    if #partyIds == 0 then 
        print("[VERIFY DEBUG] No party members found")
        return false 
    end
    
    local mainCount = 0
    local farmCount = 0
    
    for _, userId in pairs(partyIds) do
        local group = isPlayerInCorrectGroup(userId)
        if group == "MAIN" then
            mainCount = mainCount + 1
        elseif group == "FARM" then
            farmCount = farmCount + 1
        else
            print("[VERIFY DEBUG] Invalid member found:", userId)
            return false
        end
    end
    
    print("[VERIFY DEBUG] Party composition - MAIN:", mainCount, "FARM:", farmCount)
    
    local isValid = false
    if isMainGroupMember() then
        isValid = mainCount == 4 and farmCount == 0
        print("[VERIFY DEBUG] Main group check - valid:", isValid, "(expected 4 MAIN, 0 FARM)")
    elseif isFarmGroupMember() then
        isValid = farmCount == 4 and mainCount == 0
        print("[VERIFY DEBUG] Farm group check - valid:", isValid, "(expected 0 MAIN, 4 FARM)")
    else
        print("[VERIFY DEBUG] Current player not in any group!")
        return false
    end
    
    return isValid
end

local function leaveParty()
    pcall(function()
        local args = {"Leave"}
        ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
    end)
end

local function inviteMembers()
    if localPlayer.Name == MAIN_GROUP.Leader.Name then
        for attempt = 1, 3 do
            for _, member in pairs(MAIN_GROUP.Members) do
                pcall(function()
                    local targetPlayer = Players:FindFirstChild(member.Name)
                    if targetPlayer then
                        local args = {"Invite", targetPlayer}
                        ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
                    end
                end)
                task.wait(2)
            end
            if attempt < 3 then
                task.wait(8)
            end
        end
        
    elseif localPlayer.Name == FARM_GROUP.Leader.Name then
        for attempt = 1, 3 do
            for _, member in pairs(FARM_GROUP.Members) do
                pcall(function()
                    local targetPlayer = Players:FindFirstChild(member.Name)
                    if targetPlayer then
                        local args = {"Invite", targetPlayer}
                        ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
                    end
                end)
                task.wait(2)
            end
            if attempt < 3 then
                task.wait(8)
            end
        end
    end
end

local function acceptInvites()
    local leaderName = nil
    
    for _, member in pairs(MAIN_GROUP.Members) do
        if localPlayer.Name == member.Name then
            leaderName = MAIN_GROUP.Leader.Name
            break
        end
    end
    
    if not leaderName then
        for _, member in pairs(FARM_GROUP.Members) do
            if localPlayer.Name == member.Name then
                leaderName = FARM_GROUP.Leader.Name
                break
            end
        end
    end
    
    if leaderName then
        for i = 1, 3 do
            pcall(function()
                local leaderPlayer = Players:FindFirstChild(leaderName)
                if leaderPlayer then
                    local args = {"AcceptInvite", leaderPlayer}
                    ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
                end
            end)
            task.wait(5)
        end
    end
end

local function startQueue()
    print("[QUEUE DEBUG] Checking if player should start queue...")
    print("[QUEUE DEBUG] Current player ID:", localPlayer.UserId)
    print("[QUEUE DEBUG] Main leader ID:", MAIN_GROUP.Leader.UserId)
    print("[QUEUE DEBUG] Farm leader ID:", FARM_GROUP.Leader.UserId)
    
    if localPlayer.UserId == MAIN_GROUP.Leader.UserId or localPlayer.UserId == FARM_GROUP.Leader.UserId then
        print("[QUEUE DEBUG] Player is a leader, attempting to start queue...")
        
        local success, error = pcall(function()
            print("[QUEUE DEBUG] Accessing ReplicatedStorage.Remotes.Team...")
            local args = {"JoinQueue", "CASCADE"}
            print("[QUEUE DEBUG] Firing server with args:", unpack(args))
            ReplicatedStorage.Remotes.Team:FireServer(unpack(args))
            print("[QUEUE DEBUG] Queue request sent successfully!")
        end)
        
        if not success then
            print("[QUEUE DEBUG] ERROR starting queue:", error)
        end
    else
        print("[QUEUE DEBUG] Player is not a leader, skipping queue start")
    end
end

local function isMainGroupMember()
    if localPlayer.UserId == MAIN_GROUP.Leader.UserId then return true end
    for _, member in pairs(MAIN_GROUP.Members) do
        if localPlayer.UserId == member.UserId then return true end
    end
    return false
end

local function isFarmGroupMember()
    if localPlayer.UserId == FARM_GROUP.Leader.UserId then return true end
    for _, member in pairs(FARM_GROUP.Members) do
        if localPlayer.UserId == member.UserId then return true end
    end
    return false
end

-- MAIN EXECUTION
local function runPartyManager()
    waitForGameLoaded()
    
    local matchStartTime = tick()
    
    while true do
        if game.PlaceId == PLACE_MAIN then
            safeTeleport(PLACE_MATCH)
            
        elseif game.PlaceId == PLACE_MATCH then
            task.wait(10)
            
            while not allAccountsInServer() do
                local elapsed = tick() - matchStartTime
                
                if elapsed > 300 then
                    safeTeleport(PLACE_MATCH)
                    matchStartTime = tick()
                    break
                end
                task.wait(15)
            end
            
            if allAccountsInServer() then
                local remotesReady = waitForRemotesReady()
                local guiReady = waitForGuiReady()
                
                if remotesReady and guiReady then
                    local partyStartTime = tick()
                    local partyAttempt = 0
                    
                    while true do
                        partyAttempt = partyAttempt + 1
                        local partyElapsed = tick() - partyStartTime
                        
                        if partyElapsed > 180 then
                            leaveParty()
                            task.wait(2)
                            break
                        end
                        
                        inviteMembers()
                        task.wait(3)
                        
                        acceptInvites()
                        task.wait(10)
                        
                        task.wait(2)
                        
                        if verifyParties() then
                            print("[MAIN DEBUG] Party verification successful! Starting queue...")
                            startQueue()
                            print("[MAIN DEBUG] Queue started, waiting for game teleport...")
                            return
                        else
                            leaveParty()
                            task.wait(3)
                        end
                    end
                end
            end
            
        elseif game.PlaceId == PLACE_CASCADE then
            task.wait(10)
            
            if isFarmGroupMember() then
                safeTeleport(PLACE_MATCH)
            end
            
            task.wait(20)
            
            if isMainGroupMember() then
                safeTeleport(PLACE_MATCH)
            end
            
            matchStartTime = tick()
            
        end
        
        task.wait(1)
    end
end

-- START SCRIPT
spawn(runPartyManager)
