if not game:IsLoaded() then
    repeat task.wait() until game:IsLoaded()
end

-- Simple Inventory Change Scanner with Webhook (Fixed - No Spam)
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- Webhook configuration
local webhook = "https://discord.com/api/webhooks/1414252596830539956/DRrktLKjUKuUGIAu11TXrinT2LGkzI3Uchu0ttrNtS5xhDDzs6KT1yhX7UFbbsHi0SqK"

-- HTTP request function
local httprequest = request or http_request or (http and http.request) or (syn and syn.request) or (fluxus and fluxus.request)

-- Store previous inventory
local oldInventory = {}

-- Get player username
local function getUsername()
    local player = Players.LocalPlayer
    return player and player.Name or "Unknown Player"
end

-- Send webhook notification with ALL changes at once
local function sendWebhook(allChanges, fullInventory)
    if not httprequest or not webhook then return end
    
    local username = getUsername()
    
    -- Build changed items list
    local changedItems = {}
    local totalNewItems = 0
    
    for item, data in pairs(allChanges) do
        local oldQty = (tonumber(oldInventory[item]) or 0)
        local newQty = tonumber(data.total) or 0
        local change = data.change
        
        table.insert(changedItems, "**" .. item .. ":** " .. oldQty .. " â†’ " .. newQty .. " (+" .. change .. ")")
        totalNewItems = totalNewItems + change
    end
    
    -- Build full inventory string
    local inventoryList = {}
    for itemName, quantity in pairs(fullInventory) do
        local qty = tonumber(quantity) or 0
        if allChanges[itemName] then
            -- Highlight changed items
            table.insert(inventoryList, "**" .. itemName .. ":** " .. qty)
        else
            table.insert(inventoryList, itemName .. ": " .. qty)
        end
    end
    
    local changedText = table.concat(changedItems, "\n")
    local inventoryText = table.concat(inventoryList, "\n")
    
    if changedText == "" then changedText = "No changes" end
    if inventoryText == "" then inventoryText = "No items in inventory" end
    
    -- Truncate if too long (Discord limits)
    if #changedText > 800 then
        changedText = string.sub(changedText, 1, 800) .. "\n... (truncated)"
    end
    if #inventoryText > 800 then
        inventoryText = string.sub(inventoryText, 1, 800) .. "\n... (truncated)"
    end
    
    task.spawn(function()
        pcall(function()
            httprequest({
                Url = webhook,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode({
                    embeds = {{
                        title = "ðŸ“¦ Inventory Update",
                        description = "Detected " .. #changedItems .. " item changes (+' .. totalNewItems .. " total items)",
                        color = 65280, -- Green color
                        fields = {
                            {
                                name = "ðŸ‘¤ Player",
                                value = "`" .. username .. "`",
                                inline = true
                            },
                            {
                                name = "ðŸ“Š Changes",
                                value = #changedItems .. " items",
                                inline = true
                            },
                            {
                                name = "âž• Total Added",
                                value = "+" .. totalNewItems,
                                inline = true
                            },
                            {
                                name = "ðŸ“ˆ Item Changes",
                                value = changedText,
                                inline = false
                            },
                            {
                                name = "ðŸ“‹ Full Inventory",
                                value = "```\n" .. inventoryText .. "\n```",
                                inline = false
                            }
                        },
                        timestamp = os.date("!%Y-%m-%dT%H:%M:%S.000Z"),
                        footer = {
                            text = "Inventory Scanner â€¢ Anti-Spam Version"
                        }
                    }}
                })
            })
        end)
    end)
end

-- Get current inventory
local function getInventory()
    local success, result = pcall(function()
        return game:GetService("ReplicatedStorage").Remotes.GetReadableData:InvokeServer()
    end)
    
    if success and result and result.Inventory then
        return result.Inventory
    end
    return {}
end

-- Check for changes (FIXED - No longer sends webhook for each item!)
local function checkChanges()
    local success, newInventory = pcall(getInventory)
    if not success or not newInventory then
        return
    end
    
    local allChanges = {}  -- Collect ALL changes first
    
    -- Find all items that increased
    for item, quantity in pairs(newInventory) do
        local newQty = tonumber(quantity) or 0
        local oldQty = tonumber(oldInventory[item]) or 0
        
        if newQty > oldQty then
            local change = newQty - oldQty
            allChanges[item] = {change = change, total = newQty}
        end
    end
    
    -- Only send ONE webhook if there are ANY changes
    if next(allChanges) then  -- Check if table has any entries
        pcall(sendWebhook, allChanges, newInventory)
    end
    
    oldInventory = newInventory
end

-- Initialize
oldInventory = getInventory()
print("Anti-Spam Inventory Scanner started - Will batch all changes into single webhook!")

-- Main loop
spawn(function()
    while true do
        pcall(checkChanges)
        wait(2)
    end
end)
