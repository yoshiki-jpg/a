local function cleanupNPCs()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    
    -- List of NPC names to preserve
    local preserveNames = {
        ["Shalltear"] = true,
        ["David"] = true
    }
    
    -- Function to check if an instance is likely an NPC (Model method)
    local function isNPC(instance)
        return (
            instance:IsA("Model") and
            instance:FindFirstChild("Humanoid") and
            instance:FindFirstChild("HumanoidRootPart")
        )
    end
    
    -- Function to get the top level NPC model from a Humanoid
    local function getNPCModelFromHumanoid(humanoid)
        local parent = humanoid.Parent
        if parent and parent:IsA("Model") then
            return parent
        end
        return nil
    end
    
    -- Function to process NPCs
    local function processNPCs(parent)
        local npcsFound = 0
        local npcsRemoved = 0
        local processedModels = {} -- To prevent duplicate processing
        
        -- First pass: Find NPCs using traditional method (Model with Humanoid)
        for _, instance in ipairs(parent:GetDescendants()) do
            if isNPC(instance) then
                processedModels[instance] = true
                
                -- Skip if this is the LocalPlayer's character
                if LocalPlayer and instance == LocalPlayer.Character then
                    print("Skipping LocalPlayer character")
                    continue
                end
                
                npcsFound = npcsFound + 1
                
                -- Check if this NPC should be preserved
                local name = instance.Name
                if preserveNames[name] then
                    print("Preserving NPC (Model check): " .. name)
                else
                    print("Removing NPC (Model check): " .. name)
                    instance:Destroy()
                    npcsRemoved = npcsRemoved + 1
                end
            end
        end
        
        -- Second pass: Find any remaining Humanoids
        for _, instance in ipairs(parent:GetDescendants()) do
            if instance:IsA("Humanoid") then
                local npcModel = getNPCModelFromHumanoid(instance)
                
                -- Skip if we've already processed this model or if it's been deleted
                if not npcModel or processedModels[npcModel] or not npcModel.Parent then
                    continue
                end
                
                -- Skip if this is the LocalPlayer's character
                if LocalPlayer and npcModel == LocalPlayer.Character then
                    print("Skipping LocalPlayer character (Humanoid check)")
                    continue
                end
                
                npcsFound = npcsFound + 1
                processedModels[npcModel] = true
                
                -- Check if this NPC should be preserved
                local name = npcModel.Name
                if preserveNames[name] then
                    print("Preserving NPC (Humanoid check): " .. name)
                else
                    print("Removing NPC (Humanoid check): " .. name)
                    npcModel:Destroy()
                    npcsRemoved = npcsRemoved + 1
                end
            end
        end
        
        return npcsFound, npcsRemoved
    end
    
    -- Process the entire game
    local totalFound, totalRemoved = processNPCs(game)
    
    -- Print summary
    print("=== NPC Cleanup Summary ===")
    print("Total NPCs found: " .. totalFound)
    print("NPCs removed: " .. totalRemoved)
    print("NPCs preserved: " .. (totalFound - totalRemoved))
    print("LocalPlayer was automatically preserved")
    print("========================")
end

-- Run the cleanup with error handling
local success, error = pcall(function()
    cleanupNPCs()
end)

if not success then
    print("Error during cleanup: " .. tostring(error))
end
