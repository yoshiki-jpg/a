-- Wait for game to fully load
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- ========== CONFIGURATION ==========
local MAIN_GAME_ID = 14067600077
local MATCHMAKING_ID = 18637069183
local CASCADE_ID = 138059541435332

local MAIN_GROUP = {
    Leader = {Name = "3malaysians", UserId = 9247717801},
    Members = {
        {Name = "3ramlyborigar", UserId = 9252243951},
        {Name = "3mcdoharris", UserId = 9252259406},
        {Name = "3familialhamly", UserId = 9252229000},
    }
}

local FARM_GROUP = {
    Leader = {Name = "nguy83748", UserId = 9251688294},
    Members = {
        {Name = "elar87482", UserId = 9252971862},
        {Name = "reedfantastic04", UserId = 9253020411},
        {Name = "abhgemgfd", UserId = 9253013396},
    }
}

-- ========== SERVICES ==========
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- ========== UTILITY FUNCTIONS ==========
local function safeTeleport(placeId)
    while true do
        local success = pcall(function()
            TeleportService:Teleport(placeId, Players.LocalPlayer)
        end)
        if success then break end
        task.wait(5)
    end
end

local function getAllAccountNames()
    local names = {}
    table.insert(names, MAIN_GROUP.Leader.Name)
    for _, member in ipairs(MAIN_GROUP.Members) do
        table.insert(names, member.Name)
    end
    table.insert(names, FARM_GROUP.Leader.Name)
    for _, member in ipairs(FARM_GROUP.Members) do
        table.insert(names, member.Name)
    end
    return names
end

local function countAccountsInServer()
    local serverPlayers = Players:GetPlayers()
    local accountNames = getAllAccountNames()
    local count = 0
    
    for _, account in ipairs(accountNames) do
        for _, player in ipairs(serverPlayers) do
            if player.Name == account then
                count = count + 1
                break
            end
        end
    end
    
    return count
end

local function getTeamRemote()
    return ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Team")
end

local function invitePlayer(username)
    local args = {
        [1] = "Invite",
        [2] = Players:WaitForChild(username)
    }
    getTeamRemote():FireServer(unpack(args))
end

local function acceptInvite(leaderUsername)
    local args = {
        [1] = "AcceptInvite",
        [2] = Players:WaitForChild(leaderUsername)
    }
    getTeamRemote():FireServer(unpack(args))
end

local function leaveParty()
    local args = {"Leave"}
    getTeamRemote():FireServer(unpack(args))
end

local function joinQueue()
    local args = {
        [1] = "JoinQueue",
        [2] = "CASCADE"
    }
    getTeamRemote():FireServer(unpack(args))
end

local function getPartyMemberIds()
    local success, memberIds = pcall(function()
        local membersFrame = Players.LocalPlayer.PlayerGui
            :WaitForChild("menu")
            .main.sidebar.party.members
        
        local ids = {}
        for _, frame in ipairs(membersFrame:GetChildren()) do
            local userId = tonumber(frame.Name)
            if userId then
                table.insert(ids, userId)
            end
        end
        return ids
    end)
    
    return success and memberIds or {}
end

local function checkPartyAlignment(expectedGroup)
    local currentPartyIds = getPartyMemberIds()
    local expectedIds = {}
    
    -- Build expected UserIds list
    table.insert(expectedIds, expectedGroup.Leader.UserId)
    for _, member in ipairs(expectedGroup.Members) do
        table.insert(expectedIds, member.UserId)
    end
    
    -- Sort both for comparison
    table.sort(currentPartyIds)
    table.sort(expectedIds)
    
    -- Check if they match
    if #currentPartyIds ~= #expectedIds then
        return false
    end
    
    for i = 1, #expectedIds do
        if currentPartyIds[i] ~= expectedIds[i] then
            return false
        end
    end
    
    return true
end

local function getPlayerGroup(playerName)
    -- Check if main group leader
    if playerName == MAIN_GROUP.Leader.Name then
        return MAIN_GROUP, "leader"
    end
    
    -- Check if farm group leader  
    if playerName == FARM_GROUP.Leader.Name then
        return FARM_GROUP, "leader"
    end
    
    -- Check if main group member
    for _, member in ipairs(MAIN_GROUP.Members) do
        if member.Name == playerName then
            return MAIN_GROUP, "member"
        end
    end
    
    -- Check if farm group member
    for _, member in ipairs(FARM_GROUP.Members) do
        if member.Name == playerName then
            return FARM_GROUP, "member"
        end
    end
    
    return nil, nil
end

-- ========== MAIN LOGIC ==========
local placeId = game.PlaceId
local localPlayer = Players.LocalPlayer

-- If player is in main game, teleport to matchmaking
if placeId == MAIN_GAME_ID then
    safeTeleport(MATCHMAKING_ID)

-- If player is in matchmaking lobby
elseif placeId == MATCHMAKING_ID then
    local playerGroup, playerRole = getPlayerGroup(localPlayer.Name)
    
    -- 5-minute failsafe
    task.delay(300, function()
        if game.PlaceId == MATCHMAKING_ID then
            safeTeleport(MATCHMAKING_ID)
        end
    end)
    
    -- Wait 10 seconds
    task.wait(10)
    
    -- Check if all eight accounts are in server (retry twice with 15s wait)
    local allAccountsPresent = false
    for attempt = 1, 3 do
        local count = countAccountsInServer()
        
        if count == 8 then
            allAccountsPresent = true
            break
        end
        
        if attempt < 3 then
            task.wait(15)
        end
    end
    
    -- If all eight accounts are in server, form parties
    if allAccountsPresent then
        
        -- Repeat party formation up to 3 times
        local maxAttempts = 3
        local partyFormed = false
        
        for attempt = 1, maxAttempts do
            
            -- Leaders invite their group members
            if playerRole == "leader" then
                for _, member in ipairs(playerGroup.Members) do
                    invitePlayer(member.Name)
                    task.wait(1) -- Small delay between invites
                end
                task.wait(3) -- Wait for members to accept
            
            -- Members accept invite from their leader
            elseif playerRole == "member" then
                task.wait(2) -- Wait for leader to send invites
                acceptInvite(playerGroup.Leader.Name)
                task.wait(3) -- Wait for party to form
            end
            
            -- Check if all members are in their respective parties
            if checkPartyAlignment(playerGroup) then
                partyFormed = true
                break
            else
                leaveParty()
                task.wait(2)
            end
        end
        
        -- If all parties are completed with proper accounts, start queueing
        if partyFormed then
            joinQueue()
        end
    end

-- If player is in cascade (after successful queue)
elseif placeId == CASCADE_ID then
    local playerGroup, playerRole = getPlayerGroup(localPlayer.Name)
    
    -- Wait 15 seconds
    task.wait(15)
    
    -- Farm group teleports first
    if playerGroup == FARM_GROUP then
        safeTeleport(MATCHMAKING_ID)
    
    -- Main group waits additional 15 seconds then teleports
    elseif playerGroup == MAIN_GROUP then
        task.wait(15)
        safeTeleport(MATCHMAKING_ID)
    end

else
    -- Unknown place ID
end
