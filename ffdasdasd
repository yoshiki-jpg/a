-- SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")

-- CONFIGURATION
local MAIN_GROUP = {
    Leader = {Name = "3malaysians", UserId = 9247717801},
    Members = {
        {Name = "3ramlyborigar", UserId = 9252243951},
        {Name = "3mcdoharris", UserId = 9252259406},
        {Name = "3familialhamly", UserId = 9252229000},
    }
}

local FARM_GROUP = {
    Leader = {Name = "nguy83748", UserId = 9251688294},
    Members = {
        {Name = "elar87482", UserId = 9252971862},
        {Name = "reedfantastic04", UserId = 9253020411},
        {Name = "abhgemgfd", UserId = 9253013396},
    }
}

local ALL_ACCOUNTS = {
    9247717801, 9252243951, 9252259406, 9252229000, 9251688294, 9252971862, 9253020411, 9253013396
}

local PLACE_MAIN = 14067600077
local PLACE_MATCH = 18637069183
local PLACE_CASCADE = 138059541435332

-- UTILITY FUNCTIONS
local function waitForGameLoaded()
    if not game:IsLoaded() then
        game.Loaded:Wait()
    end
    -- wait until PlayerGui is ready
    local localPlayer = Players.LocalPlayer
    repeat task.wait(1) until localPlayer:FindFirstChild("PlayerGui")
    repeat task.wait(1) until localPlayer.PlayerGui:FindFirstChild("menu")
end

local function safeTeleport(placeId)
    while true do
        local success = pcall(function()
            TeleportService:Teleport(placeId, Players.LocalPlayer)
        end)
        if success then break end
        task.wait(5)
    end
end

-- REMOTES
local function inviteMember(leaderName, memberName)
    if game.PlaceId ~= PLACE_MATCH then return end
    local localPlayer = Players.LocalPlayer
    if localPlayer.Name ~= leaderName then return end
    for i = 1, 3 do
        local args = {[1] = "Invite", [2] = Players:WaitForChild(memberName)}
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Team"):FireServer(unpack(args))
        task.wait(0.5)
    end
end

local function acceptInvite(memberName, leaderName)
    if game.PlaceId ~= PLACE_MATCH then return end
    local localPlayer = Players.LocalPlayer
    local isMember = false
    for _, m in pairs(MAIN_GROUP.Members) do if localPlayer.Name == m.Name then isMember = true end end
    for _, m in pairs(FARM_GROUP.Members) do if localPlayer.Name == m.Name then isMember = true end end
    if not isMember then return end

    for i = 1, 3 do
        local args = {[1] = "AcceptInvite", [2] = Players:WaitForChild(leaderName)}
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Team"):FireServer(unpack(args))
        task.wait(0.5)
    end
end

local function leaveParty()
    if game.PlaceId ~= PLACE_MATCH then return end
    local args = {"Leave"}
    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Team"):FireServer(unpack(args))
end

local function startQueueIfLeader()
    local localPlayer = Players.LocalPlayer
    if localPlayer.UserId == MAIN_GROUP.Leader.UserId or localPlayer.UserId == FARM_GROUP.Leader.UserId then
        local args = {[1] = "JoinQueue", [2] = "CASCADE"}
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Team"):FireServer(unpack(args))
    end
end

-- PARTY VERIFICATION
local function getPartyUserIds()
    if game.PlaceId ~= PLACE_MATCH then return {} end
    local membersFrame = Players.LocalPlayer.PlayerGui:WaitForChild("menu"):WaitForChild("main"):WaitForChild("sidebar"):WaitForChild("party"):WaitForChild("members")
    local ids = {}
    for _, child in pairs(membersFrame:GetChildren()) do
        if child:IsA("Frame") and tonumber(child.Name) then
            table.insert(ids, tonumber(child.Name))
        end
    end
    return ids
end

local function verifyParties()
    local partyIds = getPartyUserIds()
    local function checkGroup(group)
        for _, member in pairs(group.Members) do
            if not table.find(partyIds, member.UserId) then return false end
        end
        return true
    end
    return checkGroup(MAIN_GROUP) and checkGroup(FARM_GROUP)
end

-- SERVER CHECK
local function allAccountsInServer()
    local count = 0
    for _, player in pairs(Players:GetPlayers()) do
        for _, id in pairs(ALL_ACCOUNTS) do
            if player.UserId == id then count += 1 end
        end
    end
    return count == #ALL_ACCOUNTS
end

-- FULL AUTORETRY LOOP
local function runPartyManager()
    while true do
        if game.PlaceId == PLACE_MAIN then
            safeTeleport(PLACE_MATCH)

        elseif game.PlaceId == PLACE_MATCH then
            -- Wait for all accounts to be present AND local GUI ready
            repeat task.wait(5) until allAccountsInServer() and Players.LocalPlayer:FindFirstChild("PlayerGui") and Players.LocalPlayer.PlayerGui:FindFirstChild("menu")

            -- Invite/accept retry loop
            repeat
                -- Leaders invite members
                if Players.LocalPlayer.Name == MAIN_GROUP.Leader.Name then
                    for _, m in pairs(MAIN_GROUP.Members) do inviteMember(MAIN_GROUP.Leader.Name, m.Name) end
                elseif Players.LocalPlayer.Name == FARM_GROUP.Leader.Name then
                    for _, m in pairs(FARM_GROUP.Members) do inviteMember(FARM_GROUP.Leader.Name, m.Name) end
                end

                -- Members accept invites
                for _, m in pairs(MAIN_GROUP.Members) do acceptInvite(m.Name, MAIN_GROUP.Leader.Name) end
                for _, m in pairs(FARM_GROUP.Members) do acceptInvite(m.Name, FARM_GROUP.Leader.Name) end

                task.wait(2)

                if verifyParties() then
                    startQueueIfLeader()
                    break
                else
                    leaveParty()
                    task.wait(1)
                end
            until verifyParties()

        elseif game.PlaceId == PLACE_CASCADE then
            task.wait(10)
            safeTeleport(PLACE_MATCH) -- FARM GROUP
            task.wait(20)
            safeTeleport(PLACE_MATCH) -- MAIN GROUP
        end
        task.wait(5)
    end
end

-- EXECUTE
waitForGameLoaded()
runPartyManager()
